buildscript {
    repositories {
        mavenCentral()
        maven {
          url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:2.0.5.RELEASE"
        classpath "com.diffplug.spotless:spotless-plugin-gradle:3.20.0"
        classpath "gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:1.6.9"
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

// coding style formatter and analysis
apply plugin: "com.diffplug.gradle.spotless"
apply plugin: 'checkstyle'

// static analysis tools
apply plugin: 'pmd'
apply plugin: "com.github.spotbugs"

// import KeY ant project
def keyFolder = "../key/key"
ant.importBuild "${keyFolder}/scripts/build.xml"
compileJava.dependsOn jarAll

bootJar {
    baseName = 'gs-rest-service'
    version =  '0.1.0'
}

repositories {
    mavenCentral()
}

sourceSets {
    test {
        resources {
            srcDir file('src/test/resources')
            exclude '**/*.java'
        }
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    implementation "org.eclipse.jdt:org.eclipse.jdt.core:3.15.0"
    compile("org.springframework.boot:spring-boot-starter-web")
    testCompile('org.springframework.boot:spring-boot-starter-test')
    compile("org.springframework.boot:spring-boot-starter-websocket")
    compile("org.javatuples:javatuples:1.2")
    compile files('libs/logootsplit.jar')

    // Karate Test Framework for the server API
    testCompile 'com.intuit.karate:karate-junit4:0.9.1'
    testCompile 'com.intuit.karate:karate-apache:0.9.1'

    // adds /actuator/health indicator, this way, other applications can check if the
    // server is ready. Also useful for tests.
    compile("org.springframework.boot:spring-boot-starter-actuator")

    // include KeYnd KeY dependency libraries
    compile fileTree(dir: "${keyFolder}/deployment/libs", include: "*.jar")
    compile fileTree(dir: "${keyFolder}/deployment/components", include: "*.jar")

    // SpringFox: Will automatically provide a HTML description of the API
    compile "io.springfox:springfox-swagger2:2.9.2"
    compile "io.springfox:springfox-swagger-ui:2.9.2"
}

wrapper {
   gradleVersion = '4.10.2'
}

// Spotless coding style checker and formatter
spotless {
  enforceCheck false // do not enforce formatting rules on regular build/check.
  // ...instead call spotlessCheck / spotlessApply directly

  java {
    googleJavaFormat()
  }
}

// Checkstyle tool. Also checks for aspects of the Google Java Style
checkstyle {
  configFile rootProject.file('checkstyle.xml')

  ignoreFailures false
  showViolations true
  toolVersion ="6.14.1" 
}

checkstyleMain {
    configFile rootProject.file('.checkstyle_google.xml')
    source ='src/main/java'
}

checkstyleTest {
    configFile rootProject.file('.checkstyle_google.xml')
    source ='src/test/java'
}

// PMD static analysis settings
// options: https://docs.gradle.org/current/dsl/org.gradle.api.plugins.quality.PmdExtension.html
pmd {
    ruleSets = ["java-basic", "java-braces", "java-design"]
    sourceSets = [sourceSets.main]
    // only report problems where change is highly recommended.
    // (on priority 3 there are some ridiculous warnings)
    // see also https://pmd.sourceforge.io/pmd-5.3.3/customizing/rule-guidelines.html
    rulePriority = 2
    consoleOutput = true
}

// SpotBugs static analysis tool.
// Supports only Java 1.8 and 1.9
tasks.withType(com.github.spotbugs.SpotBugsTask) {
  reports {
    html {
      enabled = true
    }
    xml {
      enabled = false
    }
  }
}

spotbugs {
  toolVersion = '3.1.9'
  ignoreFailures = false
  effort = 'max'
  reportLevel = 'high'
  sourceSets = [sourceSets.main, sourceSets.test]
  excludeFilter = file("$rootProject.projectDir/.spotbugs-filter.xml")
}

// configure tests to show some actually useful debug information
test {
    // https://docs.gradle.org/current/dsl/org.gradle.api.tasks.testing.logging.TestLoggingContainer.html
    testLogging {
        // set options for log level LIFECYCLE
        events "failed"
        exceptionFormat "full"

        // set options for log level DEBUG
        debug {
            events "started", "skipped", "failed"
            exceptionFormat "full"
        }

        // remove standard output/error logging from --info builds
        // by assigning only 'failed' and 'skipped' events
        info.events = ["failed", "skipped"]
    }

    // pull karate options into the runtime
    systemProperty "karate.options", System.properties.getProperty("karate.options")
    // pull karate env into the runtime
    systemProperty "karate.env", System.properties.getProperty("karate.env")
    // ensure tests are always run
    outputs.upToDateWhen { false }
}

