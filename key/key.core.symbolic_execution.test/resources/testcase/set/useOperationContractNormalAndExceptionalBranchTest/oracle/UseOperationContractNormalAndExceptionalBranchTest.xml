<?xml version="1.0" encoding="UTF-8"?>
<start name="&lt;start&gt;" pathCondition="true" pathConditionChanged="false">
   <methodCall name="&lt;call UseOperationContractNormalAndExceptionalBranchTest.main(value)&gt;" pathCondition="true" pathConditionChanged="false">
      <statement name="int magicNumber = magic(value);" pathCondition="true" pathConditionChanged="false">
         <operationContract name="result_0 = magic(value) catch(exc_0)
pre: (lt(value, Z(0(#))) &amp; geq(value, Z(neglit(0(1(#))))))&lt;&lt;SC&gt;&gt;
| lt(value, Z(neglit(0(1(#)))))
| (geq(value, Z(0(#)))
&amp; lt(value, Z(0(1(#)))))&lt;&lt;SC&gt;&gt;
| geq(value, Z(0(1(#))))
post: (   (  lt(value, Z(0(#)))
       &amp; geq(value, Z(neglit(0(1(#))))))&lt;&lt;SC&gt;&gt;
   -&gt;   !(exc_0 = null)&lt;&lt;impl&gt;&gt;
      &amp; java.lang.Exception::instance(exc_0) = TRUE)
&amp; (   lt(value, Z(neglit(0(1(#)))))
   -&gt;   !(exc_0 = null)&lt;&lt;impl&gt;&gt;
      &amp; java.lang.Exception::instance(exc_0) = TRUE)
&amp; (   (geq(value, Z(0(#))) &amp; lt(value, Z(0(1(#)))))&lt;&lt;SC&gt;&gt;
   -&gt; result_0 = Z(2(4(#))) &amp; (exc_0 = null)&lt;&lt;impl&gt;&gt;)
&amp; (   geq(value, Z(0(1(#))))
   -&gt; result_0 = Z(4(8(#))) &amp; (exc_0 = null)&lt;&lt;impl&gt;&gt;)
mod: intersect(\if (  (  lt(value, Z(0(#)))
                  &amp; geq(value, Z(neglit(0(1(#))))))&lt;&lt;SC&gt;&gt;
               | lt(value, Z(neglit(0(1(#)))))
               | (geq(value, Z(0(#)))
               &amp; lt(value, Z(0(1(#)))))&lt;&lt;SC&gt;&gt;)
              \then (intersect(\if (  (  lt(value,
                                            Z(0(#)))
                                       &amp; geq(value,
                                             Z(neglit(0(1(#))))))&lt;&lt;SC&gt;&gt;
                                    | lt(value,
                                         Z(neglit(0(1(#))))))
                                   \then (intersect(\if ((  lt(value,
                                                               Z(0(#)))
                                                          &amp; geq(value,
                                                                Z(neglit(0(1(#))))))&lt;&lt;SC&gt;&gt;)
                                                        \then (allLocs)
                                                        \else (allLocs),
                                                    \if (lt(value,
                                                            Z(neglit(0(1(#))))))
                                                        \then (allLocs)
                                                        \else (allLocs)))
                                   \else (allLocs),
                               \if ((  geq(value,
                                           Z(0(#)))
                                     &amp; lt(value,
                                          Z(0(1(#)))))&lt;&lt;SC&gt;&gt;)
                                   \then (allLocs)
                                   \else (allLocs)))
              \else (allLocs),
          \if (geq(value, Z(0(1(#)))))
              \then (allLocs)
              \else (allLocs))
termination: diamond" pathCondition="true" pathConditionChanged="false" resultTerm="result_0" exceptionTerm="exc_0" contractParameters="value" preconditionComplied="true" hasNotNullCheck="false" notNullCheckComplied="false">
            <branchCondition name="and(equals(exc_0,null)&lt;&lt;impl&gt;&gt;,geq(value,Z(0(#))))" pathCondition="and(equals(exc_0,null)&lt;&lt;impl&gt;&gt;,geq(value,Z(0(#))))" pathConditionChanged="true" branchCondition="and(equals(exc_0,null)&lt;&lt;impl&gt;&gt;,geq(value,Z(0(#))))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Post (magic)">
               <statement name="int magicNumberCopy = magicNumber;" pathCondition="and(equals(exc_0,null)&lt;&lt;impl&gt;&gt;,geq(value,Z(0(#))))" pathConditionChanged="false">
                  <statement name="return magicNumber+magicNumberCopy;" pathCondition="and(equals(exc_0,null)&lt;&lt;impl&gt;&gt;,geq(value,Z(0(#))))" pathConditionChanged="false">
                     <methodReturn name="&lt;return of main&gt;" signature="&lt;return of UseOperationContractNormalAndExceptionalBranchTest.main(value)&gt;" pathCondition="and(equals(exc_0,null)&lt;&lt;impl&gt;&gt;,geq(value,Z(0(#))))" pathConditionChanged="false" isReturnValueComputed="false" methodReturnCondition="and(equals(exc_0,null)&lt;&lt;impl&gt;&gt;,geq(value,Z(0(#))))">
                        <termination name="&lt;end&gt;" pathCondition="and(equals(exc_0,null)&lt;&lt;impl&gt;&gt;,geq(value,Z(0(#))))" pathConditionChanged="false" terminationKind="NORMAL" branchVerified="true">
                        </termination>
                     </methodReturn>
                  </statement>
               </statement>
            </branchCondition>
            <branchCondition name="and(not(equals(exc_0,null)&lt;&lt;impl&gt;&gt;),leq(value,Z(neglit(1(#)))))" pathCondition="and(not(equals(exc_0,null)&lt;&lt;impl&gt;&gt;),leq(value,Z(neglit(1(#)))))" pathConditionChanged="true" branchCondition="and(not(equals(exc_0,null)&lt;&lt;impl&gt;&gt;),leq(value,Z(neglit(1(#)))))" mergedBranchCondition="false" isBranchConditionComputed="true" additionalBranchLabel="Exceptional Post (magic)">
               <statement name="return -1;" pathCondition="and(not(equals(exc_0,null)&lt;&lt;impl&gt;&gt;),leq(value,Z(neglit(1(#)))))" pathConditionChanged="false">
                  <methodReturn name="&lt;return of main&gt;" signature="&lt;return of UseOperationContractNormalAndExceptionalBranchTest.main(value)&gt;" pathCondition="and(not(equals(exc_0,null)&lt;&lt;impl&gt;&gt;),leq(value,Z(neglit(1(#)))))" pathConditionChanged="false" isReturnValueComputed="false" methodReturnCondition="and(not(equals(exc_0,null)&lt;&lt;impl&gt;&gt;),leq(value,Z(neglit(1(#)))))">
                     <termination name="&lt;end&gt;" pathCondition="and(not(equals(exc_0,null)&lt;&lt;impl&gt;&gt;),leq(value,Z(neglit(1(#)))))" pathConditionChanged="false" terminationKind="NORMAL" branchVerified="true">
                     </termination>
                  </methodReturn>
               </statement>
            </branchCondition>
         </operationContract>
      </statement>
      <methodReturnEntry path="/0/0/0/0/0/0/0"/>
      <methodReturnEntry path="/0/0/0/1/0/0"/>
   </methodCall>
   <terminationEntry path="/0/0/0/0/0/0/0/0"/>
   <terminationEntry path="/0/0/0/1/0/0/0"/>
</start>
