import React, { RefObject } from 'react';

import PropTypes from 'prop-types';

import '@fortawesome/fontawesome-free/css/all.min.css';
import FontAwesome from 'react-fontawesome';

import ProjectTreeView from './project-tree-view';
import OpenGoalsView from './open-goals-view';
import ProofTabView from './proof-tab-view';

import { Nav, NavItem, NavLink, TabContent, TabPane } from 'reactstrap';
import classnames from 'classnames';

import Project from '../../Project';
import ProofsState from '../../key/ProofsState';
import ObligationResult from '../../key/netdata/ObligationResult';

/**
 * Allows to display content in a window left from the main content
 * (usually an editor).
 *
 * It's length is variable and can be changed by the user.
 * It can also be hidden and restored by clicking a button.
 *
 * Currently it contains a project tree view, a list of open goals and proof inspection few.
 * @see {@link ProjectTreeView}
 * @see {@link OpenGoalsView}
 * @see {@link ProofTabView}
 */
export default class Sidebar extends React.Component<Props, State> {
  private sideBar: RefObject<HTMLDivElement>;

  // Minimum width of this sidebar.
  // This setting determines, how much the user can control the sidebar size.
  private static readonly minWidth: number = 220;

  constructor(props: Props) {
    super(props);

    // handles to rendered sub components
    this.sideBar = React.createRef();

    // determine, whether the initial project property is set and
    // contains anything. If not, the sidebar will be collapsed initially.
    const isProjectValid =
      this.props.project && Object.keys(this.props.project).length !== 0; // the project property is set to something
    // ^ the project object must not be empty

    this.enableTab = this.enableTab.bind(this);
    this.toggle = this.toggle.bind(this);
    this.moveSplitBar = this.moveSplitBar.bind(this);

    this.state = {
      // current width of the sidebar
      sidebarWidth: 220,
      // whether the sidebar is currently hidden, or not
      collapsed: isProjectValid
        ? // only display the sidebar initially, if a project is set
          false
        : true,
      activeTab: '1',
    };
  }

  /**
   * Invert visibility of the sidebar by collapsing it, or
   * restoring it.
   */
  private toggle() {
    this.setState({
      collapsed: !this.state.collapsed,
    });
  }

  /**
   * The sidebar is built from different tabs with different content.
   * Using this function, the current tab can be changed.
   *
   * @param tab   id of the tab that shall be shown. Use the same Id as in the NavLink definitions within the render method.
   */
  private enableTab(tab: string): void {
    if (this.state.activeTab !== tab) {
      this.setState({
        activeTab: tab,
      });
    }
  }

  /**
   * Handles resizing the sidebar when user holds the left mouse button
   * down on the bar, that splits sidebar and main content.
   *
   * This method is only meant to be called as an event handler for mouse movement.
   *
   * @param e mouse event, for example generated by onMouseMove
   */
  private moveSplitBar(e: React.MouseEvent<HTMLDivElement>) {
    // whatever usually happens, when pressing the mouse down on the split
    // bar (bar that splits view into sidebar and main content), suppress
    // it.
    e.preventDefault();

    // this function will translate mouse movement into adaptions to
    // the sidebar's width.
    const movementHandler = (movementEvent: MouseEvent) => {
      // same effect as above
      movementEvent.preventDefault();

      if (this.sideBar.current != null) {
        // we want to the splitbar to be whereever the user is currently
        // moving the mouse.
        //
        // Therefore, the new width of the sidebar is calculated,
        // by subtracting the sidebars current offset to the left window
        // border from the x coordinate of the mouse.
        const newWidth =
          movementEvent.pageX -
          this.sideBar.current.getBoundingClientRect().left;

        // check, that the new width does not violate the minimum and
        // maximum width restrictions. Also check, that the mouse is still
        // within the window.
        if (
          newWidth > Sidebar.minWidth &&
          movementEvent.pageX < window.innerWidth
        ) {
          this.setState({
            sidebarWidth: newWidth,
          });
          // Make other components recalculate their width (Im looking at you ace)
          window.dispatchEvent(new Event('resize'));
        }
      }
    };

    // the user pressed down on the split bar.
    // Until they let go, the above handler shall process mouse movement
    document.addEventListener('mousemove', movementHandler);

    // remove the installed handlers, as soon as the user lets go of
    // the split bar (stops pressing the left button)
    const mouseupHandler = (mouseUpEvent: MouseEvent) => {
      document.removeEventListener('mousemove', movementHandler);
      document.removeEventListener('mouseup', mouseupHandler);
    };

    document.addEventListener('mouseup', mouseupHandler);
  }

  /**
   * Observes changes in the sidebars properties and reacts to some of them:
   *
   * - If the currently open project changes, the sidebar opens itself and the
   *   project view
   * - If the currently open proof changes and not all goals are closed, the
   *   proof view is shown
   *
   * Also, a resize event is dispatched every time properties changed, since
   * it fixes visual bugs of the Ace editor, which is displayed right from the
   * sidebar.
   *
   * @param prevProps properties state before they got updated
   */
  public componentDidUpdate(prevProps: Props) {
    // has the project been changed?
    if (prevProps.project !== this.props.project) {
      // if so, the sidebar should definitely be visible
      this.setState({
        collapsed: false,
      });
      this.enableTab('3');
    } else if (
      prevProps.proofsState !== this.props.proofsState &&
      !this.props.proofsState.allGoalsAreClosed()
    ) {
      this.enableTab('3');
    }

    // This fixes the bug, where the height of the ace isn't correct until you resize the sidebar
    window.dispatchEvent(new Event('resize'));
  }

  /**
   * React lifecycle rendering method.
   * {@link https://reactjs.org/docs/react-component.html#render}
   *
   * See constructor documentation for information on what is being rendered.
   */
  public render() {
    // Visibility of split bar components will be controlled by
    // employing the css display property.
    // This function helps to calculate appropriate values for it.
    const genVisibilityString = (collapsed: boolean) =>
      collapsed ? 'none' : '';

    // css manipulation of sidebar components, depending on the
    // current width and visibility
    const sidebarStyleMod = {
      width: this.state.sidebarWidth,
      display: genVisibilityString(this.state.collapsed),
    };

    const restoreHandleStyleMod = {
      display: genVisibilityString(!this.state.collapsed),
    };

    const obligations = this.props.proofsState
      .getAllRecentObligationResults()
      .map(obligationResult => {
        return {
          value: obligationResult.obligationIdx,
          label: `${obligationResult.obligationIdx}: ${
            obligationResult.targetName
          }`,
        };
      })
      .sort((lhs, rhs) => lhs.value - rhs.value);

    return (
      <>
        {/* this bar will be used to restore the sidebar,
                    if it has been collapsed. */}
        <div
          className="sidebarRestoreHandle"
          style={restoreHandleStyleMod}
          onClick={this.toggle}
        >
          <FontAwesome className="sidebarRestoreButton" name="angle-right" />
        </div>

        <div className="sidebar" ref={this.sideBar} style={sidebarStyleMod}>
          {/* this bar will be used to resize the sidebar */}
          <div className="sidebar-split-bar" onMouseDown={this.moveSplitBar} />

          {/* pressing this button shall collapse the sidebar */}
          <div className="sidebarToggleButton" onClick={this.toggle}>
            <FontAwesome name="chevron-circle-left" />
          </div>

          <div className="sidebarContent">
            <Nav tabs>
              <NavItem>
                <NavLink
                  className={classnames({
                    active: this.state.activeTab === '1',
                  })}
                  onClick={() => {
                    this.enableTab('1');
                  }}
                >
                  Project
                </NavLink>
              </NavItem>
              <NavItem>
                <NavLink
                  className={classnames({
                    active: this.state.activeTab === '2',
                  })}
                  onClick={() => {
                    this.enableTab('2');
                  }}
                >
                  Open Goals
                </NavLink>
              </NavItem>
              <NavItem>
                <NavLink
                  className={classnames({
                    active: this.state.activeTab === '3',
                  })}
                  onClick={() => {
                    this.enableTab('3');
                  }}
                >
                  Proof
                </NavLink>
              </NavItem>
            </Nav>
            <div className="tabWrapper">
              <div className="tabContents">
                <TabContent activeTab={this.state.activeTab}>
                  <TabPane tabId="1">
                    <div id="projectTree">
                      <ProjectTreeView
                        onOpenFile={this.props.onOpenFile}
                        onDeleteFile={this.props.onDeleteFile}
                        onCreateFile={this.props.onCreateFile}
                        onDeleteProject={this.props.onDeleteProject}
                        onUpdateFileName={this.props.onUpdateFileName}
                        project={this.props.project}
                        openedPath={this.props.openedPath}
                      />
                    </div>
                  </TabPane>
                  <TabPane tabId="2">
                    <OpenGoalsView
                      proofsState={this.props.proofsState}
                      displayFormula={this.props.displayFormula}
                    />
                  </TabPane>
                  <TabPane tabId="3">
                    <ProofTabView
                      methods={obligations}
                      proofsState={this.props.proofsState}
                      obligationIdOfLastUpdatedProof={
                        this.props.obligationIdOfLastUpdatedProof
                      }
                      displaySequent={this.props.displayFormula}
                      saveObligationResult={this.props.saveObligationResult}
                      deleteObligationResult={this.props.deleteObligationResult}
                    />
                  </TabPane>
                </TabContent>
              </div>
            </div>
          </div>
        </div>
      </>
    );
  }
}

interface Props {
  /** Currently open project structure, as rendered in the first sidebar tab */
  project: Project;
  /** Currently available proofs as accessible in the third sidebar tab */
  proofsState: ProofsState;
  /** Needed by {@link ProofTabView} to show the last updated proof */
  obligationIdOfLastUpdatedProof: number;
  /** Called, when a file is double clicked in the project tree view */
  onOpenFile: (path: string[]) => void;
  /** Called, when the delete context option is selected on an item in the project tree view */
  onDeleteFile: (path: string[]) => void;
  /** Called, when the user selects the file creation option in the project tree view */
  onCreateFile: (path: string[]) => void;
  /** Called, when the project deletion context option is selected in the project tree view */
  onDeleteProject: (path: string) => void;
  /** Called, when a file is being renamed by the user using the project tree view */
  onUpdateFileName: (path: string) => void;
  /** Path of currently opened file. Used by the {@link ProjectTreeView} to highlight it */
  openedPath: string[];
  /** Called, whenever a proof node or open goal is selected, to display its sequent formula. */
  displayFormula: (formula: string) => void;
  /** Called, whenever the user wants to save a proof to the history */
  saveObligationResult: (obligationResult: ObligationResult) => void;
  /** Called, whenever the user wants to erase a proof from the history */
  deleteObligationResult: (obligationIdx: number, historyIdx: number) => void;
}

interface State {
  /** current width in pixels of the sidebar */
  sidebarWidth: number;
  /** whether the sidebar is currently hidden, or not */
  collapsed: boolean;
  /** id of the currently opened tab, the the NavLink items generated within the {@link Sidebar.render} method */
  activeTab: string;
}
