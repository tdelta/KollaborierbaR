import React from 'react';

import {
  faBomb,
  faFolderPlus,
  faFileMedical,
  faTrashAlt,
  faTag,
} from '@fortawesome/free-solid-svg-icons';

import FileIcon from './FileIcon';
import { Collapse, ListGroup, ListGroupItem } from 'reactstrap';
import { Context, ContextMenu, ContextAction } from './context.jsx';
import './sidebar.css';

import FileOrFolder, { sort as fileSort } from '../../FileOrFolder';

/**
 * Displays a node and its children (recursively) in a filesystem-like tree.
 *
 * If the node has children, their visibility can be toggled by a single click
 * on it.
 *
 * It will be displayed using a file symbol (@see {@link FileIcon}) and the node name.
 *
 * A file open action (double click on the node) can be handled, by providing
 * a `onOpenFile` handler. (`onOpenFile` : (filepath: string[]) => void)
 */
export default class FileNode extends React.Component<Props, State> {
  public static defaultProps = {
    onOpenFile: () => undefined,
    path: [],
  };

  constructor(props: Props) {
    super(props);

    this.state = {
      /**
       * indicates, whether child nodes shall be visible or not
       */
      selected: false,
      collapsed: false,
    };

    this.handleItemDoubleClick = this.handleItemDoubleClick.bind(this);
    this.toggle = this.toggle.bind(this);
  }

  /**
   * React lifecycle rendering method.
   * {@link https://reactjs.org/docs/react-component.html#render}
   *
   * See constructor documentation for information on what is being rendered.
   */
  public render(): React.ReactNode {
    // visible label of this node.
    // Consists of a file type specific icon and its name.
    const label = (
      <>
        <FileIcon
          className="projectTreeIcon"
          data={this.props.data}
          isOpen={!this.state.collapsed}
        />
        {this.props.data.name}
      </>
    );

    // Does the node have children? (checks for null *and* undefined)
    if (this.props.data.contents != null) {
      // If so, we need to render a folder
      return this.renderFolder(label);
    }

    // Otherwise, render a file
    else {
      return this.renderFile(label);
    }
  }

  /**
   * Renders HTML to display this node with its name and accompanying icon.
   * If the folder is not empty, it will also render the folders children
   * recursively.
   *
   * @param label   Name and icon HTML, generated by {@link this.render}
   */
  private renderFolder(label: React.ReactNode): React.ReactNode {
    /*if so, are they visible / collapsed?
       (we'll use the css display property to hide them, if necessary)
    */
    const display: object = {
      display: this.state.collapsed ? 'none' : '',
    };

    const children =
      this.props.data.contents != null ? this.props.data.contents : [];

    return (
      <>
        <div style={{ display: 'table' }}>
          {/* allow toggling the visibility of the node's children
              by a single click.

              Double clicks are to be interpreted as opening files
          */}
          <Context>
            <div
              onClick={this.toggle}
              onDoubleClick={this.handleItemDoubleClick}
            >
              {label}
            </div>
            <ContextMenu>
              <ContextAction
                icon={faFolderPlus}
                onClick={() =>
                  this.props.onCreateFile(this.props.path, 'folder')
                }
              >
                Create Folder
              </ContextAction>
              <ContextAction
                icon={faFileMedical}
                onClick={() => this.props.onCreateFile(this.props.path, 'file')}
              >
                Create File
              </ContextAction>
              <ContextAction
                icon={faTag}
                onClick={() => this.props.onUpdateFileName(this.props.path)}
              >
                Rename Folder
              </ContextAction>
              <ContextAction
                icon={faTrashAlt}
                onClick={() => this.props.onDeleteFile(this.props.path)}
              >
                Delete Folder
              </ContextAction>
            </ContextMenu>
          </Context>
          {/* display the children as unordered list */}
          <ul className="projectTreeList" style={display}>
            {fileSort(children).map(child => (
              // when rendering components using map,
              // react needs a unique key for each sub
              // component
              <li key={child.name}>
                {/* use recursion to display children.

                                        Add the child's name to the parent's
                                        path, to create it's own path.
                                    */}
                <FileNode
                  data={child}
                  path={this.props.path.concat([child.name])}
                  onOpenFile={this.props.onOpenFile}
                  onDeleteFile={this.props.onDeleteFile}
                  onCreateFile={this.props.onCreateFile}
                  onUpdateFileName={this.props.onUpdateFileName}
                  openedPath={this.props.openedPath}
                />
              </li>
            ))}
          </ul>
        </div>
      </>
    );
  }

  /**
   * Renders HTML to display this node with its name and accompanying icon.
   *
   * @param label   Name and icon HTML, generated by {@link this.render}
   */
  private renderFile(label: React.ReactNode): React.ReactNode {
    // The node is a single file
    const background =
      // TODO: higher efficency when comparing paths
      this.props.openedPath.join('/') === this.props.path.join('/')
        ? 'activeFileNode'
        : 'inactiveFileNode';

    return (
      /* double clicks are to be interpreted as opening files */
      <div className="tableFileNode">
        <Context>
          <div
            onDoubleClick={this.handleItemDoubleClick}
            className={background}
          >
            {label}
          </div>
          <ContextMenu>
            <ContextAction
              icon={faTag}
              onClick={() => this.props.onUpdateFileName(this.props.path)}
            >
              Rename File
            </ContextAction>
            <ContextAction
              icon={faTrashAlt}
              onClick={() => this.props.onDeleteFile(this.props.path)}
            >
              Delete File
            </ContextAction>
          </ContextMenu>
        </Context>
      </div>
    );
  }

  /** changes the visibility of this nodes children, if there are any. */
  private toggle() {
    this.setState({
      collapsed: !this.state.collapsed,
    });
  }

  /**
   * Called, whenever the node is double clicked. Will fire the
   * `onOpenFile` handler with the node's path, if the node represents
   * a file.
   */
  private handleItemDoubleClick() {
    if (this.props.data.type === 'file') {
      this.props.onOpenFile(this.props.path);
    }
  }
}

interface Props {
  onOpenFile: (path: string[]) => void;
  onDeleteFile: (path: string[]) => void;
  onCreateFile: (path: string[], type: string) => void;
  onUpdateFileName: (path: string[]) => void;
  data: FileOrFolder;
  openedPath: string[];
  path: string[];
}

interface State {
  collapsed: boolean;
  selected: boolean;
}
